* Gradient Descent

- This is a method for approximating functions
- It uses small spets in the opposite direction to the gradient.
- So, in order to do this, we need to be able to differentiate the function.
- We'll give this a shot in ~R~. 



#+BEGIN_SRC R :session 
where_number <- function(expr) {
    pos <- grep("[0-9]+", x=expr)
}

where_variable <- function(expr) {
    pos <- grep("[A-Za-z]", expr)
}

where_operator <- function(expr) {
    pos <- grep("[+-^/]", expr)
}
##' Convert an unquoted expression to a vector of text
##'
##' Interestingly enough, R seems to add spaces around + and -, but not around exponentiation i.e. ^. I have no idea why this is. 
##' @title expression_to_text
##' @param expr an unquoted expression
##' @return a vector of characters representing the expression
##' @author richie
expression_to_text <- function(expr) {
    exprtext <- deparse(substitute(expr))
    expression_vec <- unlist(strsplit(exprtext, ""))
}

deriv <- function(expr) {
 #todo
    
}
#+END_SRC

#+RESULTS:

So, above we handle the different kinds of values we can expect in our text. Right now, I only recognise addition, subtraction, multiplication, division and exponentiation. This is good enough for the time being (though clearly I'd want to at least be able to evaluate ~sin~ and ~cos~ at some point). 

Next, I need to implement the rules of differentiation for these kinds of functions. 

So all I really need is the exponentiation one, the variable one and the constant one. 

#+BEGIN_SRC R :session
diff_constant <- function(expr) {
    res <-  0
}
diff_variable <- function(expr) {
    
}
#+END_SRC

So, I need to rethink my design. I need to split the function into powers, variables (x^1) and constants. 

#+BEGIN_SRC R
20x^2+30x+1
#+END_SRC

So, conceptually, that's three expressions, each handled by a different rule. 
I feel like I could just handle the x to the power of 1 case along with the more general case. 

So, the polynomial part is a transform of x^n -> nx^n-1

#+BEGIN_SRC R :session  :results none 
diff_poly <- function(base, exp) {
    newexp <- exp - 1
    res <- paste0(exp, "*", base, "^", newexp)
    }
#+END_SRC

So, the function above neatly returns a string with the result of the evaluated expression. 
We cheated though, and just manipulated strings. We don't actually have strings of that form available, which is our next step. 




This means that I should be representing every part of the expression in the form constant, varable and exponent. 

I think that I went too general with my early expression function, it seems much better to split on + and -
The variables are kinda annoying.
I think that I'll create a simple class to hold them

#+BEGIN_SRC R :session :results none :tangle polynomial/build_poly.R
setwd('~/Dropbox/Code/Stats/polynomial/')
devtools::setup(".", rstudio=FALSE)
devtools::use_build_ignore("^#")
devtools::use_testthat()
devtools::document()
#+END_SRC


#+BEGIN_SRC R :session :results none :tangle polynomial/R/polynomial.R
setClass("Polynomial", slots=list(coefficient="integer",
                                           variable="character",
                                  exponent="integer"))
##' Convert a string to a polynomial
##'
##' Code assumes strings of the form 20x, 10^2 or 2xy^2
##' @title to_polynomial
##' @param string 
##' @return a polynomial object
##' @author richie
to_polynomial <- function(string) {
    var <- stringr::str_extract(string, "([A-Za-z]+)")
    coeff <- stringr::str_extract(string, "([0-9]+)")
    message("var is: ", var, "\n", "coeff is: ", coeff)
    if(grepl("\\^", x=string)) {
        exp <- stringr::str_extract(string, "([0-9]+)$")
    }
    else {
        exp <- 0
    }
    exp <- new("Polynomial", coefficient=as.integer(coeff),
               variable=var,
               exponent=as.integer(exp))
}
#+END_SRC

So we can just call eveything a polynomial and just implement a method for this kind of object right now. 

#+BEGIN_SRC R :session :results none
derive_polynomial <- function(polynomial) {
    base <- polynomial@coefficient
    exp <- polynomial@exponent
    res <- diff_poly(base, exp)
}
setGeneric("differentiate", def=derive_polynomial)
#+END_SRC

So, the code works, but it produces weird looking expressions because it doesn't automatically simplify the expressions.

That's presumably what we should do next. 

I also need to be able to actually provide numerical results.

Maybe give the differentiate function an argument to either be symbolic or not. I should just return the polynomial, and defer the printing done by the current function. 

#+BEGIN_SRC R :session :results none :tangle polynomial/R/polynomial.R
diff_poly <- function(expression) {
    res <- with(expression,
                new("Polynomial", coefficient=exponent*coefficient,
                    variable=variable,
                    exponent = exponent-1))
    
}
setGeneric("differentiate", def=diff_poly)
#+END_SRC

#+BEGIN_SRC R :session :results none :tangle polynomial/R/provide.R
  provide <- function(package) {
      if(!require(package)) {install.packages(deparse(substitute(package)))}
      else {
          library(package)
      }
  }
#+END_SRC



